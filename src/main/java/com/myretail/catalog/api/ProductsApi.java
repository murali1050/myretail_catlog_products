/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen Do not edit the class manually.
 */
package com.myretail.catalog.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.myretail.catalog.model.ErrorResponse;
import com.myretail.catalog.model.Product;
import com.myretail.catalog.model.ProductRequest;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import java.io.IOException;
import java.util.Optional;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Api(value = "product", description = "the product API")
public interface ProductsApi {

  Logger log = LoggerFactory.getLogger(ProductsApi.class);

  default Optional<ObjectMapper> getObjectMapper() {
    return Optional.empty();
  }

  default Optional<HttpServletRequest> getRequest() {
    return Optional.empty();
  }

  default Optional<String> getAcceptHeader() {
    return getRequest().map(r -> r.getHeader("Accept"));
  }

  /** Get the product details of the given product ID. */
  @ApiOperation(
      value = "Retrieves the product details for the productId.",
      notes = "Retrieves the product details based on product ID.",
      response = Product.class,
      tags = {"catalog"})
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "Response", response = Product.class),
        @ApiResponse(code = 400, message = "Invalid Request Error", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class)
      })
  @RequestMapping(
      value = "/product/{productId}",
      produces = {"application/json"},
      method = RequestMethod.GET)
  default ResponseEntity<Product> retreiveProduct(
      @ApiParam(value = "", required = true) @PathVariable("productId") String productId) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
      if (getAcceptHeader().get().contains("application/json")) {
        try {
          return new ResponseEntity<>(
              getObjectMapper()
                  .get()
                  .readValue(
                      "{\"id\":0,\"name\":\"name\",\"current_price\":{\"value\":0,\"currency_code\":\"currency_code\"}}",
                      Product.class),
              HttpStatus.NOT_IMPLEMENTED);
        } catch (IOException exp) {
          log.error("Couldn't serialize response for content type application/json", exp);
          return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
      }
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default ProductsApi interface so no"
              + " example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /** Update or Insert product details of the given product. */
  @ApiOperation(
      value = "Add / update given product details to the backend.",
      notes = "Add product details or update the product based on the given product ID. ",
      response = Product.class,
      tags = {"catalog"})
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "Response", response = Product.class),
        @ApiResponse(code = 400, message = "Invalid Request Error", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class)
      })
  @RequestMapping(
      value = "/product",
      produces = {"application/json"},
      method = RequestMethod.PUT)
  default ResponseEntity<Product> updateProduct(
      @ApiParam(value = "Request Body", required = true) @Valid @RequestBody ProductRequest body) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
      if (getAcceptHeader().get().contains("application/json")) {
        try {
          return new ResponseEntity<>(
              getObjectMapper()
                  .get()
                  .readValue(
                      "{\"id\":0,\"name\":\"name\",\"current_price\":{\"value\":0,\"currency_code\":\"currency_code\"}}",
                      Product.class),
              HttpStatus.NOT_IMPLEMENTED);
        } catch (IOException exp) {
          log.error("Couldn't serialize response for content type application/json", exp);
          return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
      }
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default ProductsApi interface so no"
              + " example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
